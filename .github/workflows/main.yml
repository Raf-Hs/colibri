name: K6 Load Testing - Colibri

on:
  # Ejecutar en push a main y develop
  push:
    branches: [ main, develop ]
  
  # Ejecutar en pull requests
  pull_request:
    branches: [ main, develop ]
  
  # Permitir ejecuci√≥n manual desde GitHub UI
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'Duraci√≥n del test (en minutos)'
        required: false
        default: '5'
      virtual_users:
        description: 'N√∫mero m√°ximo de usuarios virtuales'
        required: false
        default: '100'
  
  # Ejecutar programado (cada d√≠a a las 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'

env:
  K6_VERSION: '0.49.0'
  FRONTEND_URL: 'https://colibri-frontend.vercel.app'
  BACKEND_URL: 'https://colibri-backend-od5b.onrender.com'

jobs:
  k6-load-test:
    name: Ejecutar Pruebas de Carga K6
    runs-on: ubuntu-latest
    
    steps:
      # Paso 1: Checkout del c√≥digo
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      # Paso 2: Instalar K6
      - name: Instalar K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      # Paso 3: Verificar instalaci√≥n de K6
      - name: Verificar K6
        run: k6 version
      
      # Paso 4: Crear directorio para resultados
      - name: Crear directorio de resultados
        run: mkdir -p test-results
      
      # Paso 5: Ejecutar pruebas K6
      - name: Ejecutar K6 Load Tests
        run: |
          k6 run \
            --out json=test-results/results.json \
            --summary-export=test-results/summary.json \
            tests/load-test.js
        continue-on-error: true
      
      # Paso 6: Generar reporte HTML
      - name: Generar reporte HTML
        if: always()
        run: |
          cat > test-results/report.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>K6 Load Test Report - Colibri</title>
            <meta charset="utf-8">
            <style>
              body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 0; 
                padding: 20px; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
              }
              .container { 
                max-width: 1200px; 
                margin: 0 auto; 
                background: white; 
                padding: 30px; 
                border-radius: 12px; 
                box-shadow: 0 10px 40px rgba(0,0,0,0.2); 
              }
              h1 { 
                color: #2c3e50; 
                border-bottom: 3px solid #667eea; 
                padding-bottom: 10px; 
                display: flex;
                align-items: center;
                gap: 10px;
              }
              h2 {
                color: #34495e;
                margin-top: 30px;
              }
              .header-icon {
                font-size: 2em;
              }
              .metric { 
                background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                padding: 20px; 
                margin: 15px 0; 
                border-radius: 8px; 
                display: flex;
                justify-content: space-between;
                align-items: center;
                transition: transform 0.2s;
              }
              .metric:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
              }
              .metric-name { 
                font-weight: bold; 
                color: #34495e;
                font-size: 1.1em;
              }
              .metric-value { 
                color: #667eea; 
                font-size: 1.5em;
                font-weight: bold;
              }
              .success { color: #27ae60; }
              .warning { color: #f39c12; }
              .error { color: #e74c3c; }
              .timestamp { 
                color: #7f8c8d; 
                font-size: 0.9em;
                background: #ecf0f1;
                padding: 10px;
                border-radius: 5px;
                margin: 10px 0;
              }
              .section { 
                margin: 30px 0;
                padding: 20px;
                background: #f8f9fa;
                border-radius: 8px;
              }
              .badge {
                display: inline-block;
                padding: 6px 12px;
                border-radius: 20px;
                font-size: 0.85em;
                font-weight: bold;
                margin: 5px;
              }
              .badge-success { background: #27ae60; color: white; }
              .badge-warning { background: #f39c12; color: white; }
              .badge-error { background: #e74c3c; color: white; }
              .badge-info { background: #3498db; color: white; }
              .grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 20px 0;
              }
              .card {
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                text-align: center;
              }
              .card-title {
                color: #7f8c8d;
                font-size: 0.9em;
                margin-bottom: 10px;
              }
              .card-value {
                font-size: 2em;
                font-weight: bold;
                color: #2c3e50;
              }
              .footer {
                margin-top: 40px;
                padding-top: 20px;
                border-top: 2px solid #ecf0f1;
                text-align: center;
                color: #7f8c8d;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>
                <span class="header-icon">üöÄ</span>
                K6 Load Testing Report - Colibri
              </h1>
              
              <div class="timestamp">
                <strong>üìÖ Generado:</strong> $(date -u +"%Y-%m-%d %H:%M:%S UTC")<br>
                <strong>üîÑ Workflow:</strong> ${{ github.workflow }} - Run #${{ github.run_number }}<br>
                <strong>üè∑Ô∏è Repositorio:</strong> Raf-Hs/colibri
              </div>
              
              <div class="section">
                <h2>üìä Informaci√≥n de la Ejecuci√≥n</h2>
                <div class="metric">
                  <span class="metric-name">üåø Branch</span>
                  <span class="metric-value">${{ github.ref_name }}</span>
                </div>
                <div class="metric">
                  <span class="metric-name">üìù Commit</span>
                  <span class="metric-value">${{ github.sha }}</span>
                </div>
                <div class="metric">
                  <span class="metric-name">üë§ Autor</span>
                  <span class="metric-value">${{ github.actor }}</span>
                </div>
                <div class="metric">
                  <span class="metric-name">‚ö° Trigger</span>
                  <span class="metric-value">${{ github.event_name }}</span>
                </div>
              </div>
              
              <div class="section">
                <h2>üìà Resultados de las Pruebas</h2>
                <p>Las m√©tricas detalladas est√°n disponibles en:</p>
                <ul>
                  <li><code>results.json</code> - Resultados completos en formato JSON</li>
                  <li><code>summary.json</code> - Resumen de m√©tricas principales</li>
                </ul>
                
                <div class="grid">
                  <div class="card">
                    <div class="card-title">‚è±Ô∏è Duraci√≥n del Test</div>
                    <div class="card-value">~5min</div>
                  </div>
                  <div class="card">
                    <div class="card-title">üë• Usuarios Virtuales</div>
                    <div class="card-value">100 max</div>
                  </div>
                  <div class="card">
                    <div class="card-title">üéØ Escenarios</div>
                    <div class="card-value">2</div>
                  </div>
                  <div class="card">
                    <div class="card-title">üì° Endpoints</div>
                    <div class="card-value">5+</div>
                  </div>
                </div>
              </div>
              
              <div class="section">
                <h2>üè∑Ô∏è Estado de la Ejecuci√≥n</h2>
                <span class="badge badge-info">Workflow Ejecutado</span>
                <span class="badge badge-success">Artifacts Generados</span>
                <span class="badge badge-success">Reporte Disponible</span>
              </div>
              
              <div class="section">
                <h2>üîó Enlaces √ötiles</h2>
                <ul>
                  <li>
                    <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" target="_blank">
                      üîç Ver ejecuci√≥n completa en GitHub Actions
                    </a>
                  </li>
                  <li>
                    <a href="${{ github.server_url }}/${{ github.repository }}" target="_blank">
                      üìÇ Ir al repositorio Colibri
                    </a>
                  </li>
                  <li>
                    <a href="https://k6.io/docs/" target="_blank">
                      üìö Documentaci√≥n de K6
                    </a>
                  </li>
                </ul>
              </div>
              
              <div class="footer">
                <p>üê¶ Proyecto Colibri - Pruebas de Carga Automatizadas</p>
                <p>Generado por GitHub Actions con ‚ù§Ô∏è</p>
              </div>
            </div>
          </body>
          </html>
          EOF
      
      # Paso 7: Subir resultados como artifacts
      - name: Subir resultados de pruebas
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-test-results-colibri-${{ github.run_number }}
          path: test-results/
          retention-days: 30
      
      # Paso 8: Publicar resultados en el PR (si aplica)
      - name: Comentar resultados en PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = '## üöÄ Resultados de Pruebas de Carga K6 - Colibri\n\n';
            
            try {
              if (fs.existsSync('test-results/summary.json')) {
                const summary = JSON.parse(fs.readFileSync('test-results/summary.json', 'utf8'));
                
                comment += '### üìä M√©tricas Principales\n\n';
                comment += '| M√©trica | Valor |\n';
                comment += '|---------|-------|\n';
                
                if (summary.metrics) {
                  const httpReqs = summary.metrics.http_reqs?.values?.count || 0;
                  const httpFailed = (summary.metrics.http_req_failed?.values?.rate * 100 || 0).toFixed(2);
                  const p95 = (summary.metrics.http_req_duration?.values?.['p(95)'] || 0).toFixed(2);
                  const p99 = (summary.metrics.http_req_duration?.values?.['p(99)'] || 0).toFixed(2);
                  const avgDuration = (summary.metrics.http_req_duration?.values?.avg || 0).toFixed(2);
                  
                  comment += `| üìà Total Requests | ${httpReqs} |\n`;
                  comment += `| ‚ùå Failed Requests | ${httpFailed}% |\n`;
                  comment += `| ‚ö° Avg Duration | ${avgDuration}ms |\n`;
                  comment += `| üìä P95 Duration | ${p95}ms |\n`;
                  comment += `| üìä P99 Duration | ${p99}ms |\n`;
                  
                  // Agregar m√©tricas personalizadas si existen
                  if (summary.metrics.successful_logins) {
                    const successLogins = summary.metrics.successful_logins?.values?.count || 0;
                    const failedLogins = summary.metrics.failed_logins?.values?.count || 0;
                    comment += `| ‚úÖ Successful Logins | ${successLogins} |\n`;
                    comment += `| ‚ùå Failed Logins | ${failedLogins} |\n`;
                  }
                }
                
                comment += '\n### üéØ Thresholds\n';
                if (summary.metrics.http_req_failed?.values?.rate < 0.05) {
                  comment += '‚úÖ Error rate < 5%\n';
                } else {
                  comment += '‚ùå Error rate >= 5%\n';
                }
                
                if (summary.metrics.http_req_duration?.values?.['p(95)'] < 500) {
                  comment += '‚úÖ P95 < 500ms\n';
                } else {
                  comment += '‚ö†Ô∏è P95 >= 500ms\n';
                }
                
                comment += '\n### üìÅ Artifacts\n';
                comment += `Los resultados completos est√°n disponibles en los [artifacts del workflow](${context.payload.repository.html_url}/actions/runs/${context.runId}).\n`;
                comment += '- üìÑ `results.json` - Resultados detallados\n';
                comment += '- üìä `summary.json` - Resumen de m√©tricas\n';
                comment += '- üåê `report.html` - Reporte visual\n';
              } else {
                comment += '‚ö†Ô∏è No se pudieron cargar los resultados del summary.\n';
              }
            } catch (error) {
              comment += `‚ùå Error al procesar resultados: ${error.message}\n`;
            }
            
            comment += '\n---\n';
            comment += `üîó [Ver detalles completos en GitHub Actions](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      # Paso 9: Verificar thresholds y determinar √©xito/fallo
      - name: Verificar thresholds
        if: always()
        run: |
          if [ -f test-results/summary.json ]; then
            echo "üìä Verificando thresholds..."
            
            FAILED_RATE=$(jq -r '.metrics.http_req_failed.values.rate // 0' test-results/summary.json)
            P95_DURATION=$(jq -r '.metrics.http_req_duration.values["p(95)"] // 0' test-results/summary.json)
            
            # Convertir a n√∫meros comparables
            FAILED_PCT=$(echo "$FAILED_RATE * 100" | bc -l)
            
            echo "üìà Tasa de fallos: ${FAILED_PCT}%"
            echo "‚è±Ô∏è P95 Duration: ${P95_DURATION}ms"
            
            # Verificar thresholds
            THRESHOLD_PASSED=true
            
            if (( $(echo "$FAILED_PCT > 5" | bc -l) )); then
              echo "‚ùå THRESHOLD FALLIDO: Tasa de errores > 5% (${FAILED_PCT}%)"
              THRESHOLD_PASSED=false
            else
              echo "‚úÖ THRESHOLD OK: Tasa de errores < 5%"
            fi
            
            if (( $(echo "$P95_DURATION > 500" | bc -l) )); then
              echo "‚ö†Ô∏è WARNING: P95 > 500ms (${P95_DURATION}ms)"
              # No fallamos por esto, solo advertencia
            else
              echo "‚úÖ THRESHOLD OK: P95 < 500ms"
            fi
            
            if [ "$THRESHOLD_PASSED" = false ]; then
              echo ""
              echo "‚ùå Las pruebas NO pasaron los thresholds definidos"
              exit 1
            else
              echo ""
              echo "‚úÖ Todas las pruebas pasaron los thresholds"
            fi
          else
            echo "‚ö†Ô∏è No se pudo verificar thresholds - archivo summary.json no encontrado"
            exit 1
          fi

  notify-results:
    name: Notificar Resultados
    needs: k6-load-test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout para notificaciones
        uses: actions/checkout@v4
      
      - name: Notificaci√≥n de √©xito
        if: needs.k6-load-test.result == 'success'
        run: |
          echo "‚úÖ ============================================"
          echo "‚úÖ Pruebas de carga completadas exitosamente"
          echo "‚úÖ Proyecto: Colibri"
          echo "‚úÖ Branch: ${{ github.ref_name }}"
          echo "‚úÖ Run: #${{ github.run_number }}"
          echo "‚úÖ ============================================"
          echo ""
          echo "üìä Los resultados est√°n disponibles en:"
          echo "üîó ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      
      - name: Notificaci√≥n de fallo
        if: needs.k6-load-test.result == 'failure'
        run: |
          echo "‚ùå ============================================"
          echo "‚ùå Las pruebas de carga fallaron"
          echo "‚ùå Proyecto: Colibri"
          echo "‚ùå Branch: ${{ github.ref_name }}"
          echo "‚ùå Run: #${{ github.run_number }}"
          echo "‚ùå ============================================"
          echo ""
          echo "üîç Revisa los logs en:"
          echo "üîó ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "‚ö†Ô∏è Posibles causas:"
          echo "  - Tasa de errores > 5%"
          echo "  - Tiempos de respuesta muy altos"
          echo "  - Problemas con la aplicaci√≥n"
